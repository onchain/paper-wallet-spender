require "./spec_helper"

describe OnChain::Protocol do

  it "should parse and re-generate multi sig transaction" do
  
    OnChain::PROVIDERS[OnChain::CoinType::Bitcoin] = BitcoinTestProvider.new
  
    pub_keys_hex = 
      ["02fd89e243d38f4e24237eaac4cd3a6873ce45aa4036ec0c7b79a4d4ac0fefebc4",
      "0396e42d3c584da0300ee44dcbaee0eccaa0e6ae2264fdd2554af6d2953f95bf99"]
      
    rs = OnChain::Protocol::RedemptionScript.new(2, pub_keys_hex)
      
    dest_addr = OnChain::Protocol::Address.new(OnChain::CoinType::Bitcoin, 
      "16KBLs5NVpUcrhmcC7eifHuSJjKLufApak")
  
    unsigned_tx = OnChain::PaymentService.create_multi_sig(
      OnChain::CoinType::Bitcoin, 
      [rs],
      dest_addr,
      BigInt.new(11366),
      10000.to_u64)
      
    # This was generated by CW, doesn't mean it's correct.
    tx_hex = (<<-TX
      01000000029fd77c01b4f81f142e7e066eb9abeb4952ec5fdea51036acbb22b5ffeb57fd5f
      0100000047522102fd89e243d38f4e24237eaac4cd3a6873ce45aa4036ec0c7b79a4d4ac0f
      efebc4210396e42d3c584da0300ee44dcbaee0eccaa0e6ae2264fdd2554af6d2953f95bf99
      52aeffffffffc0161c6d62ac75f36bf95fcb2a8222f2274e86c2dcaec3434a0b6b6e0a6b60
      800000000047522102fd89e243d38f4e24237eaac4cd3a6873ce45aa4036ec0c7b79a4d4ac
      0fefebc421034000cea8f9cbaf88095d3ef539ee438e3cefea9ed9585e2e182b45496f071a
      8352aeffffffff01662c0000000000001976a91404d075b3f501deeef5565143282b6cfe8f
      ad5e9488ac00000000
    TX
    ).gsub(/\s+/, "")
    
      
    case unsigned_tx
    when OnChain::UnsignedTransaction
      #unsigned_tx.txhex.should eq(tx_hex)
      
      #unsigned_tx.hashes.size.should eq(1)
      
      #unsigned_tx.hashes[0].hash_to_sign.should eq(
      #  "11c4776527c1f3e3f02d032c08a360fce1f572a8479bcc98859fa86e75858ca0")
      
      #unsigned_tx.hashes[0].public_key.should eq(pub_keys_hex[0])
    else
      true.should eq false
    end
  
  end
  
end

# We supply the unspent outs so that we don't contatc the internet
class BitcoinTestProvider < OnChain::UTXOProvider

  def address_history(coin : CoinType, addresses : Array(String))
    return NodeStatus.new 500, "Error retrieving history"
  end
  
  def push_tx(coin : CoinType, tx : String)
    return NodeStatus.new 500, "Error retrieving history"
  end
  
  def get_unspent_outs(coin : OnChain::CoinType, addresses : Array(String))
  
    utxo = [] of OnChain::UnspentOut
    utxo << OnChain::UnspentOut.new(
      "9fd77c01b4f81f142e7e066eb9abeb4952ec5fdea51036acbb22b5ffeb57fd5f",
      BigInt.new(1111366),
      1, 
      "a91422ad290099b84bde8e6f00a8a87fffdbbddddc2b87")
    return utxo
    
  end
    
end